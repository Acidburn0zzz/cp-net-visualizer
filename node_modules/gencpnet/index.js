'use strict';
var fs = require('fs')
var proc = require('child_process')

var gencpnetChildProc = null;
var processKilled = false;

module.exports = function () {
};

module.exports.stopGenerate = function () {
  if(gencpnetChildProc)
  {
    gencpnetChildProc.kill();
    gencpnetChildProc = null;
    processKilled = true;
  }
}

module.exports.generate = function (inDegreeBound, domainSize, numNodes, callback) {
  var id = (new Date()).getTime().toString().slice(-6);
  if(typeof(callback) !== 'function') { callback = function(e, x) { } }
  
  var outFileName = __dirname + "/cpnet_vis_0000.xml";
  
  processKilled = false;
  gencpnetChildProc = proc.exec(execPath() + " -q --name vis -c " + inDegreeBound + " -d " + domainSize + " -n " + numNodes + " \"" + __dirname + "\"", function(err, stdout, stderr)
  {
    gencpnetChildProc = null;
    console.log("gencpnet complete: ", err, stdout, stderr);

    if(processKilled)
    {
      console.log("gencpnet stopped");
      callback("STOPPED", null);
    }
    else if(stderr.length > 0)
    {
      callback("GENERROR", stderr);
    }
    else if(err)
    {
      console.log(err);
      callback(true, null);
    }
    else
    {
      fs.readFile(outFileName, 'utf8', function(ferr, data)
      {
        if(ferr) { console.log(ferr); callback(true, null); }
        else {
          callback(false, data);
        }
        fs.unlink(outFileName, function(e) {});
      });
    }
    
    if(err || processKilled || stderr.length > 0)
      fs.unlink(outFileName, function(e) {});
  });
}

module.exports.version = function() {
  try {
    var verstring = proc.execSync(execPath() + " --version").toString();
  } catch(e) {
    return null;
  }
  var match = verstring.match("CP-net Generator ([0-9]*.[0-9]*)");
  
  if(match.length < 1)
    return null;
  return match[1];
}

function execPath()
{
  const EXEC_NAME = "gencpnet";
  return "\"" + __dirname + "/" + EXEC_NAME + "\"";
}